---
- hosts: localhost
  vars:
    aws_region: eu-west-3
    private_key_name: "ansible_key"
    private_key_path: "{{ playbook_dir }}/ansible_key.pem"
    instance_type: "t3.large"
    instance_image: "ami-08182c55a1c188dee"
    # Instances will only be created if all previous instances are no longer running
    wanted_instances: 3
  environment:
    BOTO_USE_ENDPOINT_HEURISTICS: True
  gather_facts: no
  connection: local
  tasks:

    - name: stat private_key
      stat: path="{{ private_key_path }}"
      register: private_key

    - block:
        - name: create ec2 key
          ec2_key:
            name: "{{ private_key_name }}"
            region: "{{ aws_region }}"
          register: result

        - name: save the private key
          copy:
            content: "{{ result.key.private_key }}"
            dest: "{{ private_key_path }}"
            mode: "400"
      when: not private_key.stat.exists

    - name: Get instances
      ec2_instance_facts:
        filters:
          tag:instance_type: k8s-ansible
          instance-state-name: pending
          instance-state-name: running
      register: ec2_instances

    # - debug: var=ec2_instances

    - name: No instances found, create new one
      block:
      - name: Get default vpc
        ec2_vpc_net_facts:
          filters:
            isDefault: "true"
        register: default_vpc

      # - debug: var=default_vpc.vpcs[0].id

      - name: Get subnets
        ec2_vpc_subnet_facts:
          filters:
            vpc-id: "{{ default_vpc.vpcs[0].id }}"
        register: vpc_subnet

      # - debug: var=vpc_subnet.subnets[0].id


      - name: Setup ansible-k8s-group
        ec2_group:
          name: ansible-k8s-group
          description: EC2 group for ansible setup kubernetes
          region: "{{ aws_region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 80
              cidr_ip: 0.0.0.0/0
            - proto: all
              group_name: ansible-k8s-group
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0


      - ec2:
          region: "{{ aws_region }}"
          key_name: "{{ private_key_name }}"
          instance_type: "{{ instance_type }}"
          image: "{{ instance_image }}"
          group: ansible-k8s-group
          instance_tags:
            instance_type: k8s-ansible
          state: present
          wait: yes
          count: "{{ wanted_instances - (ec2_instances.instances | length) }}"
          vpc_subnet_id: "{{ vpc_subnet.subnets[0].id }}"
          assign_public_ip: yes

      when: ec2_instances.instances | length < wanted_instances

    - name: Get created instances
      ec2_instance_facts:
        filters:
          tag:instance_type: k8s-ansible
          instance-state-name: pending
          instance-state-name: running
      register: ec2_instances

    # - debug: var=ec2_instances
    #
    # - debug:
    #     msg: "{{ec2_instances.instances | length}}"


    # - name: Show instances IP
    #   debug:
    #     msg: "IP {{ ':' }} {{ item }}"
    #   loop: "{{ ec2_instances.instances | map(attribute='public_ip_address') | list }}"
    #   when: ec2_instances.instances | length > 0

    - name: Generating inventory file 'host'
      template:
        src: hosts_template.j2
        dest: hosts
      vars:
        # private_key_path: "{{ private_key_path }}"
        masters: "{{ [ec2_instances.instances[0]] | map(attribute='public_ip_address') | list }}"
        slaves: "{{ ec2_instances.instances[1:] | map(attribute='public_ip_address') | list }}"
